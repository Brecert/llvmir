{"version":3,"file":"index.js","sources":["../dist-src/values/value.js","../dist-src/instructions/instruction.js","../dist-src/instructions/binary_operation.js","../dist-src/types/type.js","../dist-src/values/integer.js","../dist-src/values/basic_block.js","../dist-src/values/function.js","../dist-src/values/function_argument.js","../dist-src/types/integer.js","../dist-src/types/label.js","../dist-src/types/void.js","../dist-src/types/function_signature.js","../dist-src/instructions/ret.js","../dist-src/constants.js","../dist-src/instructions/icmp.js","../dist-src/instructions/br.js","../dist-src/instructions/call.js","../dist-src/serializer.js","../dist-src/utils.js","../dist-src/index.js"],"sourcesContent":["export default class Value {\r\n    constructor(type) {\r\n        this.type = type;\r\n    }\r\n}\r\n","import Value from '../values/value.js';\r\nexport default class Instruction extends Value {\r\n    constructor(instructionName, type) {\r\n        super(type);\r\n        this.instructionName = instructionName;\r\n        this.terminator = false;\r\n    }\r\n    isEqual(to) {\r\n        return this.type.isEqual(to.type);\r\n    }\r\n}\r\n","import invariant from 'tiny-invariant';\r\nimport Instruction from './instruction.js';\r\nexport default class BinaryOperation extends Instruction {\r\n    // todo: support Vector<Integer>\r\n    constructor(name, type, op1, op2) {\r\n        super(name, type);\r\n        this.op1 = op1;\r\n        this.op2 = op2;\r\n        this.flags = [];\r\n        invariant(op1.type.isEqual(op2.type), `Instuction Error: op1 and op2 must have matching types`);\r\n    }\r\n}\r\n","export default class Type {\r\n    constructor(typeName) {\r\n        this.typeName = typeName;\r\n    }\r\n}\r\n","import Value from './value.js';\r\nexport default class Integer extends Value {\r\n    constructor(type, value) {\r\n        super(type);\r\n        this.type = type;\r\n        this.value = value;\r\n    }\r\n    isEqual(to) {\r\n        return (this === to ||\r\n            this.type.isEqual(to.type));\r\n    }\r\n}\r\n","import Value from './value.js';\r\nimport * as Types from '../types/index.js';\r\nimport invariant from 'tiny-invariant';\r\nexport default class BasicBlock extends Value {\r\n    constructor(name) {\r\n        super(new Types.Label);\r\n        this.name = name;\r\n        this.instructions = [];\r\n        this.terminated = false;\r\n    }\r\n    push(...instrctions) {\r\n        instrctions.forEach(inst => {\r\n            invariant(!this.terminated, 'block has already been terminated with a terminator instruction!');\r\n            this.instructions.push(inst);\r\n            if (inst.terminator) {\r\n                this.terminated = true;\r\n            }\r\n        });\r\n    }\r\n    isEqual(to) {\r\n        return (this === to);\r\n    }\r\n}\r\n","import { Value, BasicBlock, FunctionArgument } from './index.js';\r\nimport invariant from 'tiny-invariant';\r\nexport default class Function extends Value {\r\n    constructor({ signature, name, argNames, body }) {\r\n        super(signature);\r\n        this.blocks = [];\r\n        this.argNames = new Map;\r\n        this.signature = signature;\r\n        this.name = name;\r\n        this.body = body || new BasicBlock;\r\n        invariant(signature.parameters.length === argNames.length, 'Invalid number of names, signature length and name length do not match');\r\n        argNames.forEach((name, i) => {\r\n            invariant(!this.argNames.has(name), `Duplicate argument name: ${name}`);\r\n            this.argNames.set(name, i);\r\n        });\r\n        this.args = signature.parameters.map((param, i) => new FunctionArgument(param, i, argNames[i]));\r\n    }\r\n    addBlock(block) {\r\n        this.blocks.push(block);\r\n        return block;\r\n    }\r\n    isEqual(to) {\r\n        return (this === to ||\r\n            this.type.isEqual(to.type));\r\n    }\r\n}\r\n","import Value from './value.js';\r\nexport default class FunctionArgument extends Value {\r\n    constructor(type, position, name) {\r\n        super(type);\r\n        this.type = type;\r\n        this.position = position;\r\n        this.name = name;\r\n    }\r\n    isEqual(to) {\r\n        return (this === to ||\r\n            to instanceof FunctionArgument &&\r\n                this.type.isEqual(to.type));\r\n    }\r\n}\r\n","import Type from './type.js';\r\nimport * as Values from '../values/index.js';\r\nexport default class Integer extends Type {\r\n    constructor(size) {\r\n        super(`i${size}`);\r\n        this.size = size;\r\n    }\r\n    val(value) {\r\n        return new Values.Integer(this, value);\r\n    }\r\n    isEqual(to) {\r\n        return (this === to ||\r\n            to instanceof Integer &&\r\n                this.size === to.size);\r\n    }\r\n}\r\n","import Type from './type.js';\r\nexport default class Label extends Type {\r\n    constructor(labelName) {\r\n        super('label');\r\n        this.labelName = labelName;\r\n    }\r\n    isEqual(to) {\r\n        return (this === to);\r\n    }\r\n}\r\n","import Type from './type.js';\r\nexport default class Void extends Type {\r\n    constructor() {\r\n        super('void');\r\n    }\r\n    isEqual(to) {\r\n        return to instanceof Void;\r\n    }\r\n}\r\n","import Type from '../types/type.js';\r\nexport default class FunctionSignature extends Type {\r\n    constructor(returnType, parameters) {\r\n        super(returnType.typeName);\r\n        this.returnType = returnType;\r\n        this.parameters = parameters;\r\n    }\r\n    isEqual(to) {\r\n        return (this === to ||\r\n            to instanceof FunctionSignature &&\r\n                this.returnType === to.returnType &&\r\n                this.parameters === to.parameters);\r\n    }\r\n}\r\n","import invariant from 'tiny-invariant';\r\nimport Instruction from './instruction.js';\r\nimport * as Types from '../types/index.js';\r\nexport default class Ret extends Instruction {\r\n    constructor(type, value) {\r\n        super('ret', type);\r\n        this.value = value;\r\n        this.terminator = true;\r\n        this.flags = [];\r\n        if (type instanceof Types.Void) {\r\n            invariant(value === undefined, 'Instruction Error: when returning void, `ret void` cannot have any values associated with it');\r\n        }\r\n        else {\r\n            invariant(value !== undefined, 'Instruction Error: when returning any type other than void, a value must be associated with it');\r\n        }\r\n    }\r\n}\r\n","export const BOOL_WIDTH = 1;\r\n","import invariant from 'tiny-invariant';\r\nimport { BOOL_WIDTH } from '../constants.js';\r\nimport Instruction from './instruction.js';\r\nimport * as Types from '../types/index.js';\r\nexport default class ICmp extends Instruction {\r\n    constructor(cond, opType, op1, op2) {\r\n        super('icmp', new Types.Integer(BOOL_WIDTH));\r\n        this.cond = cond;\r\n        this.opType = opType;\r\n        this.op1 = op1;\r\n        this.op2 = op2;\r\n        this.flags = [];\r\n        invariant(opType.isEqual(op1.type), 'Type Error: op1 does not match the expected type');\r\n        invariant(op1.type.isEqual(op2.type), 'Type Error: op1 and op2 must be the same type');\r\n    }\r\n}\r\n// type, opcode, operands\r\n// ${opcode} ${type} ${operands.join(',')}\r\n","import { BOOL_WIDTH } from '../constants.js';\r\nimport invariant from 'tiny-invariant';\r\nimport Instruction from './instruction.js';\r\nimport * as Types from '../types/index.js';\r\nexport default class Br extends Instruction {\r\n    constructor(cond, ifTrue, ifFalse) {\r\n        super('br', new Types.Void);\r\n        this.cond = cond;\r\n        this.ifTrue = ifTrue;\r\n        this.ifFalse = ifFalse;\r\n        this.terminator = true;\r\n        this.flags = [];\r\n        invariant(cond.type instanceof Types.Integer, `Type Error: cond type must be an Integer`);\r\n        invariant(cond.type.size === BOOL_WIDTH, `Type Error: Integer size must be '${BOOL_WIDTH}' not ${cond.type.size}`);\r\n    }\r\n}\r\n","import invariant from 'tiny-invariant';\r\nimport Instruction from './instruction.js';\r\nexport default class Call extends Instruction {\r\n    constructor(type, fn, args) {\r\n        super('call', type);\r\n        this.type = type;\r\n        this.fn = fn;\r\n        this.args = args;\r\n        this.flags = [];\r\n        invariant(type.isEqual(fn.signature.returnType), 'Type Error: Function return type and Call return type must be the same');\r\n        invariant(args.length === fn.signature.parameters.length, 'Instruction Error: Function parameters length and Call args length are not the same');\r\n        args.forEach((arg, i) => {\r\n            invariant(arg.type.isEqual(fn.signature.parameters[i]), `Type Error: Argument ${i}'s type of Call does not match Functions parameter type`);\r\n        });\r\n    }\r\n}\r\n","import * as Instructions from './instructions/index.js';\r\nimport * as Values from './values/index.js';\r\nimport * as Types from './types/index.js';\r\nimport invariant from 'tiny-invariant';\r\nexport default class Serializer {\r\n    constructor() {\r\n        this.id = 0;\r\n        this.identifiers = new Map;\r\n        this.globals = new Set();\r\n        this.block_id = 0;\r\n        this.blocks = new Map;\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.id = 0;\r\n        this.identifiers = new Map;\r\n        this.block_id = 0;\r\n        this.blocks = new Map;\r\n    }\r\n    newIdentifier(inst) {\r\n        const id = this.id;\r\n        this.identifiers.set(inst, id);\r\n        this.id += 1;\r\n        return id;\r\n    }\r\n    newGlobal(name) {\r\n        invariant(!this.globals.has(name), `Invalid name: name '${name}' has already been defined`);\r\n        this.globals.add(name);\r\n        return name;\r\n    }\r\n    newBlock(block, name) {\r\n        this.blocks.set(block, name ? name : `bb${this.block_id += 1}`);\r\n        return this.blocks.get(block);\r\n    }\r\n    block(block, blockName) {\r\n        if (block instanceof Values.BasicBlock) {\r\n            blockName = blockName || this.newBlock(block, block.name);\r\n            invariant(block.terminated, `Unterminated Block: '${blockName}'`);\r\n            // (NAME|bb\\d+):\\n\r\n            let io = '';\r\n            io += `${blockName}:\\n`;\r\n            block.instructions.forEach(inst => {\r\n                io += `\\t${this.instruction(inst)}\\n`;\r\n            });\r\n            return io;\r\n        }\r\n    }\r\n    functionSignature(sig) {\r\n        return `${sig.returnType.typeName}`;\r\n    }\r\n    functionArgument(arg) {\r\n        let io = `${arg.type.typeName}`;\r\n        this.newIdentifier(arg.name || `$__${this.id}__`);\r\n        return io;\r\n    }\r\n    function(fn) {\r\n        this.reset();\r\n        /*\r\n            define ${signature} @${name} (${args.join(',')}) {\r\n                ${body}\r\n                ${blocks.join('\\n')}\r\n            }\r\n        */\r\n        let io = `define ${this.functionSignature(fn.signature)} @${this.newGlobal(fn.name)} (${fn.args.map(arg => this.functionArgument(arg))}) {\\n`;\r\n        let bodyName;\r\n        if (fn.body.instructions.length > 0) {\r\n            bodyName = this.newBlock(fn.body, fn.body.name);\r\n        }\r\n        let blockNames = fn.blocks.map(b => this.newBlock(b, b.name));\r\n        let body;\r\n        if (fn.body.instructions.length > 0) {\r\n            body = this.block(fn.body, bodyName);\r\n        }\r\n        let blocks = fn.blocks.map((b, i) => this.block(b, blockNames[i]));\r\n        if (fn.body.instructions.length > 0) {\r\n            io += `${body}\\n`;\r\n        }\r\n        io += `${blocks.join('\\n')}}`;\r\n        return io;\r\n    }\r\n    instruction(inst) {\r\n        let io = '';\r\n        if (!inst.terminator) {\r\n            io += `%${this.newIdentifier(inst)} = `;\r\n        }\r\n        io += `${inst.instructionName} `;\r\n        if (inst instanceof Instructions.BinaryOperation) {\r\n            io += `${inst.type.typeName} ${this.arg(inst, inst.op1)}, ${this.arg(inst, inst.op2)}`;\r\n        }\r\n        if (inst instanceof Instructions.ICmp) {\r\n            io += `${inst.cond} ${inst.opType.typeName} ${this.arg(inst, inst.op1)}, ${this.arg(inst, inst.op2)}`;\r\n        }\r\n        if (inst instanceof Instructions.Ret) {\r\n            io += `${inst.type.typeName}`;\r\n            if (!(inst.type instanceof Types.Void)) {\r\n                io += ` ${this.arg(inst, inst.value)}`;\r\n            }\r\n        }\r\n        if (inst instanceof Instructions.Call) {\r\n            invariant(this.globals.has(inst.fn.name), 'Invalid Name: Call name has not been declared yet');\r\n            io += `${inst.type.typeName} @${inst.fn.name} (${inst.args.map(v => `${v.type.typeName} ${this.arg(inst, v)}`).join(', ')})`;\r\n        }\r\n        if (inst instanceof Instructions.Br) {\r\n            io += `i1 ${this.arg(inst, inst.cond)}, ${this.arg(inst, inst.ifTrue)}, ${this.arg(inst, inst.ifFalse)}`;\r\n        }\r\n        return io;\r\n    }\r\n    arg(inst, value) {\r\n        if (value instanceof Values.Integer) {\r\n            return `${value.value}`;\r\n        }\r\n        if (value instanceof Instructions.Instruction) {\r\n            return `%${this.identifiers.get(value)}`;\r\n        }\r\n        if (value instanceof Values.BasicBlock) {\r\n            invariant(this.blocks.has(value), `basic block ${value.name} has not been declared yet!`);\r\n            return `label %${this.blocks.get(value)}`;\r\n        }\r\n        if (value instanceof Values.FunctionArgument) {\r\n            invariant(value.name, `name doesn't exist for functionargument`);\r\n            return `%${this.identifiers.get(value.name)}`;\r\n        }\r\n        throw `Unimplemented arg: unimplemented arg value: ${value.constructor.name}`;\r\n    }\r\n}\r\n","import * as Instructions from './instructions/index.js';\r\nimport * as Values from './values/index.js';\r\nimport * as Types from './types/index.js';\r\nclass UtilityFunction extends Values.Function {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.blocks = [];\r\n    }\r\n    createBlock(name) {\r\n        const block = new UtilityBlock(name);\r\n        this.addBlock(block);\r\n        return block;\r\n    }\r\n    block(name, cb) {\r\n        const foundBlock = this.blocks.find(b => b.name === name);\r\n        const block = this.blocks.find(b => b.name === name) || new UtilityBlock(name);\r\n        cb(block);\r\n        if (foundBlock === undefined) {\r\n            this.addBlock(block);\r\n        }\r\n        return block;\r\n    }\r\n}\r\nclass UtilityBlock extends Values.BasicBlock {\r\n    binop(name, type, op1, op2) {\r\n        const binop = new Instructions.BinaryOperation(name, type, op1, op2);\r\n        this.push(binop);\r\n        return binop;\r\n    }\r\n    br(cond, ifTrue, ifFalse) {\r\n        const br = new Instructions.Br(cond, ifTrue, ifFalse);\r\n        this.push(br);\r\n        return br;\r\n    }\r\n    call(type, fn, args) {\r\n        const call = new Instructions.Call(type, fn, args);\r\n        this.push(call);\r\n        return call;\r\n    }\r\n    icmp(cond, opType, op1, op2) {\r\n        const icmp = new Instructions.ICmp(cond, opType, op1, op2);\r\n        this.push(icmp);\r\n        return icmp;\r\n    }\r\n    ret(type, value) {\r\n        const ret = new Instructions.Ret(type, value);\r\n        this.push(ret);\r\n        return ret;\r\n    }\r\n}\r\nexport const i = (size) => new Types.Integer(size);\r\nexport const ret = (value) => value instanceof Types.Void\r\n    ? new Instructions.Ret(value)\r\n    : new Instructions.Ret(value.type, value);\r\nexport const nop = new Types.Void;\r\nexport const sig = (returnType, parameters = []) => new Types.FunctionSignature(returnType, parameters);\r\nexport const label = (name) => new Types.Label(name);\r\nexport function define(signature, name, cb) {\r\n    const argNames = signature.parameters.map((v, i) => `${i}`);\r\n    const fn = new UtilityFunction({ signature, name, argNames });\r\n    cb(fn, fn.args);\r\n    return fn;\r\n}\r\n","import * as Instructions from './instructions/index.js';\r\nimport * as Values from './values/index.js';\r\nimport * as Types from './types/index.js';\r\nimport Serializer from './serializer.js';\r\nimport * as utils from './utils.js';\r\nexport { Instructions, Values, Types, Serializer, utils };\r\nexport class Module {\r\n    constructor() {\r\n        this.functions = [];\r\n    }\r\n    addFunction(fn) {\r\n        this.functions.push(fn);\r\n    }\r\n    build(values = this.functions) {\r\n        const s = new Serializer;\r\n        const io = [];\r\n        values.forEach(inst => {\r\n            if (inst instanceof Values.Function) {\r\n                io.push(s.function(inst));\r\n            }\r\n            if (inst instanceof Instructions.Instruction) {\r\n                io.push(s.instruction(inst));\r\n            }\r\n        });\r\n        return io;\r\n    }\r\n}\r\n// const f = define('fib', [{ n: i(32) }], {\r\n// \tmain(self) {\r\n// \t\tself.icmp('slt', i(32), n, i(32).val(2))\r\n// \t\tself.br(icmp, ifThen, ifElse)\r\n// \t}\r\n// }, i(32))\r\n// // todo: add getArg(name: string)\r\n// const n = f.args.find(arg => arg.name === 'n')!\r\n// let ret = new Instructions.Ret(i(32), i(32).val(3))\r\n// let ifThen = f.addBlock(new Values.BasicBlock('if.then'))\r\n// ifThen.push(new Instructions.Ret(n.type, n))\r\n// let ifElse = f.addBlock(new Values.BasicBlock('if.else'))\r\n// let n1 = new Instructions.BinaryOperation('add', n.type, n, i(32).val(-1))\r\n// let res1 = new Instructions.Call(f.signature.returnType, f, [ n1 ])\r\n// let n2 = new Instructions.BinaryOperation('add', n.type, n, i(32).val(-2))\r\n// let res2 = new Instructions.Call(f.signature.returnType, f, [ n2 ])\r\n// let n3 = new Instructions.BinaryOperation('add', n1.type, n1, n2)\r\n// let retElse = new Instructions.Ret(n3.type, n3)\r\n// ifElse.push(n1, res1, n2, res2, n3, retElse)\r\n// let icmp = new Instructions.ICmp('slt', i(32), n, i(32).val(2))\r\n// let br = new Instructions.Br(icmp, ifThen, ifElse)\r\n// f.body.push(icmp, br)\r\n// m.functions.push(f)\r\n// console.log(s.block(b))\r\n"],"names":["Types.Label","Integer","Values.Integer","Types.Void","Types.Integer","Values.BasicBlock","Instructions.BinaryOperation","Instructions.ICmp","Instructions.Ret","Instructions.Call","Instructions.Br","Instructions.Instruction","Values.FunctionArgument","Values.Function","Types.FunctionSignature"],"mappings":"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"}